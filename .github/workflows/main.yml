name: Process Text
on:
  workflow_dispatch:
    inputs:
      text:
        description: 'Text to analyze (URL or plain text)'
        required: true
        type: string

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # ðŸ”¹ Generar requirements.txt con la versiÃ³n correcta de TensorFlow
      - name: Create requirements.txt
        run: |
          echo "transformers==4.38.2" > requirements.txt
          echo "torch==2.0.1" >> requirements.txt
          echo "numpy==1.26.4" >> requirements.txt
          echo "tensorflow-cpu==2.16.2" >> requirements.txt  # Actualizado a 2.16.2
          echo "requests==2.31.0" >> requirements.txt
          echo "beautifulsoup4==4.12.3" >> requirements.txt

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      # ðŸ”¹ Extraer texto de URL o usar texto plano directamente
      - name: Extract text from URL or use input
        run: |
          python -c "
          import sys
          import requests
          from bs4 import BeautifulSoup
          text = '''${{ github.event.inputs.text }}'''
          if text.startswith('http://') or text.startswith('https://'):
              try:
                  response = requests.get(text, timeout=10)
                  soup = BeautifulSoup(response.text, 'html.parser')
                  paragraphs = soup.find_all('p')
                  first_paragraph = paragraphs[0].get_text().strip() if paragraphs else 'No paragraphs found'
                  text = first_paragraph
              except Exception as e:
                  text = f'Error extracting content: {str(e)}'
          with open('input.txt', 'w', encoding='utf-8') as f:
              f.write(text)
          "

      - name: Analyze text
        id: analyze
        env:
          CUDA_VISIBLE_DEVICES: "-1"
        run: |
          python ai_model.py input.txt > output.txt
          {
            echo "result<<EOF"
            cat output.txt
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
          
      - name: Mostrar salida
        run: cat output.txt

      - name: Mostrar entrada
        run: cat input.txt
          
      - name: Upload result
        uses: actions/upload-artifact@v4
        with:
          name: analysis-result
          path: output.txt
